#!/bin/python
import os
import sys
import time
import inquirer as inq
from platform import system
from lists_header import *
from c_colors import bcolors as colors

# Getting The OS name
os_name = system()

# Making colored msg
WARNING_STR = lambda msg: colors.WARNING + f"{msg}" + colors.ENDC # yellow
RED_STR = lambda msg: colors.RED + f"{msg}" + colors.ENDC # red 
GREEN_STR = lambda msg: colors.GREEN + f"{msg}" + colors.ENDC # green
BLUE_STR = lambda msg: colors.BLUE + f"{msg}" + colors.ENDC # blue
CYAN_STR = lambda msg: colors.CYAN + f"{msg}" + colors.ENDC # cyan
BOLD_STR = lambda msg: colors.BOLD + f"{msg}" + colors.ENDC # BOLD
UNDERLINE_STR = lambda msg: colors.UNDERLINE + f"{msg}" + colors.ENDC # underlined


# ------ Help menu
print_help = lambda: print(GREEN_STR("Usage: rns \"Videos directory\" \"Subtitles directory\""))

if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
    print_help()
    exit()

# -------------------- Getting videos's path and sub's path
elif len(sys.argv) == 3:
    video_path = sys.argv[1]            # Video path from arguments 
    sub_path = sys.argv[2]              # Subtitles path from arguments

else:
    try:
        video_path = input("Enter videos path: ")
        sub_path = input("Enter subtitles path: ")
    except KeyboardInterrupt:
            print(RED_STR("\nQuitting..."))
            exit()
    except Exception as e:
        print(RED_STR(e))


# ----- Handling wrong subs's path 
try:
    os.chdir(sub_path)

except FileNotFoundError:
    print(RED_STR("Wrong Subtitles path, File not found ):"))
    print(WARNING_STR("Please use a valid path"))
    exit()

except Exception as e:
    print(RED_STR(e))
    exit()

finally:
    sub_path = os.getcwd()

# ----- Handling wrong videos's path
try:
    os.chdir(video_path)

except FileNotFoundError:
    print(RED_STR("Wrong Videos path, File not found ):"))
    print(RED_STR("Please use a valid path"))
    exit()

except Exception as e:
    print(RED_STR(e))
    exit()

finally:
    video_path = os.getcwd()

# ----- Processing the lists
global videos
videos = os.listdir(video_path)
videos = [video for video in videos if isvideo(video)]
videos.sort()
subs = os.listdir(sub_path)
subs = [sub for sub in subs if issub(sub)]
subs.sort()

# -------------------- Menus
confirm_menu = [
        inq.Confirm("istrue",
            message = BOLD_STR("Yes or No."),
            default = "True"),
        ]

video_or_sub_menu = [
        inq.List("op",
            message = BOLD_STR("Reorder the"),
            choices = ['videos', 'subtitles']),
        ]

# ------------------ Define funcs

# Clear and copy funcs
if os_name.lower() in ["linux", "unix"]:
    copy = lambda org, dst: os.system(f"cp \"{org}\" \"{dst}\"")
    clear = lambda: os.system("clear")

elif os_name.lower() in ["windows"]:
    copy = lambda org, dst: os.system(f"copy \"{org}\" \"{dst}\"")
    clear = lambda: os.system("cls")

endl = lambda: print('\n')

# Exit confirm
def confirm_exit():
    print(RED_STR("\nAre you sure you want to exit ?"))
    ans = inq.prompt(confirm_menu)
    return ans['istrue']

# Reorder a list 
def re_order(org):
    try:
        clear()
        org_menu = [
                inq.List('op',
                    message = BLUE_STR("An item to move"),
                    choices = [item for item in org]
                    ),
                ]

        ans = inq.prompt(org_menu)
        ans = ans['op']
        ans_index = org.index(ans)
        alist = [item for item in org]
        alist.pop(ans_index)

        sec_menu = [
                inq.List('op',
                    message = GREEN_STR("An item to replace with"),
                    choices = [item for item in alist]
                    ),
                ]

        sec_ans = inq.prompt(sec_menu)
        sec_ans = sec_ans['op']
        sec_ans_index = alist.index(sec_ans) + 1

        print(f"Replace {ans} -> {sec_ans}")

        confirm = inq.prompt(confirm_menu)
        confirm = confirm['istrue']


        if confirm:
            org[ans_index], org[sec_ans_index] = org[sec_ans_index], org[ans_index]
            clear()
            print(GREEN_STR('The new order'))
            printlist(org, enum = True)
            endl()
            print(BLUE_STR("Move another one ?"))
            confirm = inq.prompt(confirm_menu)
            confirm = confirm['istrue']

            if confirm:
                re_order(org)

            else:
                return True

        else:
            re_order(org)


    except KeyboardInterrupt:
        if confirm_exit():
            print(RED_STR("Quitting..."))
            exit()

        else:
            re_order(org)


def delete(org):
    try:
        delete_menu = [
                inq.List('op',
                    message = BLUE_STR("An item to delete"),
                    choices = [item for item in org]
                    ),
                ]

        item_to_delete = inq.prompt(delete_menu)
        item_to_delete = item_to_delete['op']

        print(WARNING_STR("Are you sure you want to delete this item ?"))

        ans = inq.prompt(confirm_menu)
        ans = ans['istrue']


        if ans:
            org.remove(item_to_delete)
            endl()
            print(BLUE_STR("Do you want to delete another item ?"))
            ans = inq.prompt(confirm_menu)
            ans = ans['istrue']

            if ans :
                delete(org)

            else:
                return True


        else:
            print(WARNING_STR("Do you want to delete another item ?"))
            ans = inq.prompt(confirm_menu)
            ans = ans['istrue']
            if ans :
                delete(org)

            else:
                return False


    except KeyboardInterrupt:

        if confirm_exit():
            print(RED_STR("Quitting..."))
            exit()

        else:
            delete(org)


# A menu for controling reodering lists 
def re_order_menu():
    try:
        clear()

        ans = inq.prompt(video_or_sub_menu)
        ans = ans['op']

        if "video" in ans:
            delete(videos)

            print("Do you want to change the order ?")
            ans = inq.prompt(confirm_menu)

            if ans['istrue']:
                re_order(videos)

        elif "sub" in ans:
            delete(subs)

            print("Do you want to change the order ?")
            ans = inq.prompt(confirm_menu)

            if ans["istrue"]:
                re_order(subs)

        else:
            print("Unkown option ):")
            return 0

        return 1
    except KeyboardInterrupt:

        if confirm_exit():
            print(RED_STR("Quitting..."))
            exit()

        else:
            re_order_menu()


# Print the lists to start the copy process
def print_sorted_menu():
    clear()
    print(BLUE_STR("Videos:"))
    printlist(videos)
    endl()
    print(BLUE_STR("Subtitles:"))
    printlist(subs)

    if len(subs) != len(videos):
        print(WARNING_STR("Warrning: Videos and Subitiles files don't have same number."))

# Rename by a format
def rename(video_path):
    try:
        clear()
        print(WARNING_STR("Enter the video naming format, For example:"))
        print("BreakingBad.S01E02.mp4 will become BreakingBad.S" + GREEN_STR("@s") + "E" + GREEN_STR("@e") + ".mp4")
        print(BOLD_STR(WARNING_STR("Don't forget the video format.")))
        video_name = input(">>> ")
        if "@s" not in video_name or "@e" not in video_name:
            print(RED_STR("Not a valid name, Please Enter \'@s\' and \'@e\' "))
            time.sleep(2)
            rename(video_path)
        seasons_list = []
        renamed_videos= []
        renamed_subs = []

        try:
            seasons_number = int(input("Please enter The Seasons number: "))
        except ValueError:
            print(RED_STR("This is not a number ):"))
            time.sleep(2)
            rename(video_path)
        except Exception as e:
            print(RED_STR(e))

        for i in range(1, seasons_number + 1):

            try:
                season_ep = int(input(f"How many Episodes in Season {i}: "))

            except ValueError:
                print(RED_STR("This is not a number ):"))
                time.sleep(2)
                rename(video_path)
            except Exception as e:
                print(RED_STR(e))

            li = [season_ep]
            seasons_list.append(li)

        try:
                first_ep = int(input("Start from the episode number: "))

        except ValueError:
                print(RED_STR("This is not a number ):"))
                time.sleep(2)
                rename(video_path)

        for index, li in enumerate(seasons_list):
            endl()
            tmp_video_name = video_name
            s = "%.2d" % (index + 1)
            print("Season: " + s)
            for e in range(first_ep,li[0] + 1):
                e = "%.2d" % e
                video_name = video_name.replace("@s", s)
                video_name = video_name.replace("@e", e)
                print(video_name)
                video_format = get_video_format(video_name)
                sub_format = get_sub_format(subs[0])
                sub_name = video_name.replace(video_format, "")
                sub_name += sub_format
                print(sub_name)
                renamed_videos.append(video_name)
                renamed_subs.append(sub_name)
                video_name = tmp_video_name

        new_dir = input("What to name the new folder: ")
        print(video_path)
        new_path = os.path.join(video_path,new_dir)
        print("New path: ", new_path)
        os.mkdir(new_path)
        print(GREEN_STR("Folder created."))
        print(BLUE_STR("Videos..."))
        copy_list(videos, video_path, renamed_videos, new_path)
        print(BLUE_STR("Subtitles..."))
        copy_list(subs, sub_path, renamed_subs, new_path)

    except KeyboardInterrupt:
        if confirm_exit():
            print(RED_STR("Quitting..."))
            exit()

        else:
            rename(video_path)

    except Exception as e:
        print(RED_STR(e))


# Main menu func
def main_menu():
    try:
        clear()

        choice = [
                inq.List('op',
                    message = "Process to do",
                    choices = ['Start', 'Renaming', 'Just exit'],
                    ),
                ]

        choice = inq.prompt(choice)
        choice = choice['op']
        if "Auto" in choice:
            renamed_sub_list = rename_to_list(subs, videos)
            copy_list(subs, sub_path, renamed_sub_list, video_path)
        elif "Renaming" in choice:
            rename(video_path)
        elif "exit" in choice:
            print("Good bye...")
            exit()

        else:
            print("Unkown option ):")
            time.sleep(1)
            main_menu()
    except KeyboardInterrupt:

        if confirm_exit():
            print(RED_STR("Quitting..."))
            exit()

        else:
            main_menu()

    except Exception as e:
        pritn(RED_STR(e))

def copy_list(org, org_path, renamed_list, target_path):
    print("Copying...")
    index = 1
    for org_item, renamed_item in zip(org, renamed_list):
        org_item_path = os.path.join(org_path, org_item)
        target_item_path = os.path.join(target_path, renamed_item)
        copy(org_item_path, target_item_path)
        print(org_item + GREEN_STR(" Copied to ") + renamed_item)
    print(GREEN_STR("All Copied."))

# Main
def main():
    endl()
    print_sorted_menu()
    print("Are you ok with this sorting ?")
    ans = inq.prompt(confirm_menu)
    if ans['istrue']:
        main_menu()
    else:
        if not re_order_menu():
            main()
        else:
            main_menu()

if __name__=="__main__":
    try:
        main()
    except KeyboardInterrupt:
        if confirm_exit():
            print(RED_STR("Quitting..."))
            exit()
        else:
            main()
    except Exception as e:
        print(RED_STR(e))
